/*******************************************************************************************
* 
*                                  DO NOT EDIT THIS FILE
* 
* This file was automatically generated, any modification to it will be lost
* 
*******************************************************************************************/

#include "TestDataFunctions.h"


std::vector<float> GetWaveformBaselineData()
{
std::vector<float> lBaselineOutputData = {
    /* IDX: 0*/ -156, -144, -213, -400, -272, -317, -299, -320, -389, -409, -247, -258, -310, -125, -154, -122, -119, 70, -165, -199, -96, -140, -147, -169, -242, -236, -104, -148, -229, -169, -181, -250,
    /* IDX: 1*/ -207, -209, -542, -712, -699, -762, -708, -713, -838, -771, -549, -546, -598, -150, -185, -246, -113, -160, -138, -259, -95, -143, -151, -175, -245, -239, -108, -148, -226, -172, -194, -251,
    /* IDX: 2*/ -219, -220, -511, -669, -671, -738, -720, -797, -923, -786, -529, -497, -540, -150, -168, -236, -111, -156, -178, -294, -96, -137, -146, -173, -244, -237, -108, -148, -230, -173, -186, -251,
    /* IDX: 3*/ -209, -204, -503, -799, -760, -975, -872, -764, -871, -810, -552, -478, -429, 18, -178, -179, -129, -248, -176, -245, -100, -150, -158, -174, -250, -244, -109, -151, -232, -177, -194, -257,
    /* IDX: 4*/ -217, -211, -411, -683, -796, -876, -846, -895, -987, -874, -639, -430, -401, -157, -152, -250, -81, -245, -27, -263, -95, -148, -148, -172, -250, -243, -107, -150, -235, -179, -194, -258,
    /* IDX: 5*/ -222, -222, -364, -661, -742, -1093, -1003, -936, -1044, -954, -541, -422, -403, -143, -176, -297, -116, -256, -172, -283, -97, -148, -154, -176, -250, -243, -108, -149, -231, -174, -193, -255,
    /* IDX: 6*/ -219, -213, -423, -674, -705, -965, -868, -811, -896, -868, -536, -445, -449, -152, -176, -260, -101, -239, -146, -259, -96, -147, -153, -174, -248, -242, -107, -149, -232, -180, -198, -258,
    /* IDX: 7*/ -226, -228, -475, -722, -768, -1050, -931, -890, -973, -964, -593, -505, -507, -159, -56, -254, 69, -236, -92, -283, -96, -146, -154, -174, -240, -238, -106, -149, -236, -178, -197, -256,
    /* IDX: 8*/ -268, -282, -568, -871, -1046, -1433, -1265, -1206, -1283, -1294, -773, -601, -591, -171, -170, -249, -115, -211, -186, -268, -101, -155, -159, -176, -251, -243, -106, -148, -232, -177, -193, -264,
    /* IDX: 9*/ -346, -377, -780, -1158, -1610, -2275, -1994, -1927, -2024, -2013, -1123, -817, -754, -155, -156, -233, -111, -232, -208, -272, -95, -151, -155, -174, -246, -237, -102, -143, -226, -171, -187, -259,
    /* IDX: 10*/ -368, -410, -1036, -1636, -1994, -2292, -2121, -2021, -2127, -2155, -1682, -1175, -924, -157, -105, -242, -119, -231, -189, -262, -101, -159, -162, -176, -245, -243, -106, -146, -231, -175, -195, -269,
    /* IDX: 11*/ -576, -666, -1730, -2151, -2913, -4307, -3774, -3595, -3781, -3649, -1977, -1759, -1469, -147, -178, -226, -118, -128, -198, -92, -95, -156, -157, -181, -253, -242, -108, -143, -225, -161, -197, -280,
    /* IDX: 12*/ -694, -849, -2183, -3004, -4051, -4957, -4577, -4364, -4555, -4548, -3167, -2195, -1934, -157, -208, -248, -136, -230, -210, -271, -103, -160, -163, -184, -251, -250, -112, -144, -221, -173, -205, -287,
    /* IDX: 13*/ -758, -935, -3185, -4037, -4544, -5240, -4916, -4623, -4795, -4988, -3838, -3363, -2582, -156, -178, -233, -111, -228, -183, -267, -104, -162, -163, -177, -249, -254, -118, -143, -228, -169, -202, -288,
    /* IDX: 14*/ -797, -1070, -4149, -4460, -4704, -5317, -4999, -4707, -4863, -5054, -3990, -3799, -3439, -59, -177, -89, -118, -166, -228, -228, -97, -156, -154, -174, -245, -247, -109, -143, -223, -174, -200, -288,
    /* IDX: 15*/ -788, -1070, -4301, -4465, -4634, -5241, -4972, -4662, -4785, -5004, -3972, -3807, -3591, -155, -185, -236, -91, -232, -205, -289, -96, -159, -148, -174, -243, -242, -111, -142, -225, -169, -190, -278,
    /* IDX: 16*/ -795, -1056, -4206, -4613, -4770, -5429, -5180, -4846, -4930, -5233, -4145, -3803, -3362, -141, -180, -239, -165, -259, -212, -291, -92, -154, -148, -170, -242, -243, -107, -138, -219, -164, -187, -277,
    /* IDX: 17*/ -729, -939, -3452, -3886, -4264, -5010, -4746, -4389, -4467, -4811, -3543, -2985, -2884, -96, -190, -256, -145, -238, -196, -298, -92, -152, -151, -172, -243, -236, -104, -142, -221, -168, -187, -259,
    /* IDX: 18*/ -678, -815, -3117, -3597, -3881, -4789, -4529, -4226, -4277, -4597, -3144, -2909, -2000, -151, -124, -256, -46, -238, 19, -299, -97, -152, -156, -172, -250, -242, -106, -146, -225, -170, -192, -266,
    /* IDX: 19*/ -568, -640, -1852, -2851, -3428, -3943, -3739, -3502, -3531, -3808, -2923, -1862, -1304, -178, -182, -263, -164, -242, -179, -302, -101, -155, -154, -179, -250, -239, -106, -151, -233, -169, -194, -264,
    /* IDX: 20*/ -529, -573, -1220, -1827, -2646, -3766, -3560, -3386, -3408, -3535, -1833, -1197, -948, -158, -189, -235, -136, -240, -199, -298, -100, -147, -151, -172, -239, -241, -110, -151, -231, -174, -186, -256,
    /* IDX: 21*/ -373, -388, -842, -1255, -1592, -2192, -2035, -1931, -1980, -2085, -1149, -804, -704, -165, -77, -238, -92, -253, -157, -303, -100, -148, -152, -177, -244, -242, -109, -148, -234, -172, -192, -260,
    /* IDX: 22*/ -280, -288, -668, -953, -1045, -1448, -1338, -1258, -1298, -1377, -769, -609, -118, -162, -250, -229, -143, -62, -213, -303, -97, -149, -151, -174, -247, -241, -109, -152, -235, -179, -198, -261,
    /* IDX: 23*/ -242, -238, -524, -798, -780, -1097, -998, -919, -965, -1027, -599, -504, -102, -149, -247, -248, -174, -178, -215, -295, -94, -140, -147, -170, -242, -236, -110, -148, -234, -175, -192, -260,
    /* IDX: 24*/ -227, -227, -489, -758, -736, -1045, -929, -840, -861, -953, -548, -461, -17, -155, -222, -246, -150, -164, -198, -302, -101, -145, -153, -174, -246, -242, -109, -148, -235, -178, -190, -257,
    /* IDX: 25*/ -218, -212, -441, -693, -666, -904, -801, -735, -778, -888, -544, -440, -117, -108, -259, -100, -162, -16, -195, -303, -98, -145, -150, -173, -246, -238, -108, -147, -225, -174, -193, -256,
    /* IDX: 26*/ -212, -205, -420, -765, -705, -1061, -958, -786, -774, -904, -547, -462, -164, -158, -256, -252, -156, -176, -115, -303, -98, -144, -155, -170, -247, -241, -109, -153, -236, -181, -196, -262,
    /* IDX: 27*/ -215, -213, -419, -717, -763, -1054, -890, -816, -873, -1005, -584, -430, -151, -152, -247, -222, -147, -154, -214, -292, -94, -143, -150, -172, -242, -240, -106, -152, -228, -179, -188, -256,
    /* IDX: 28*/ -222, -226, -531, -868, -847, -1171, -1044, -856, -887, -1077, -701, -510, -158, 22, -248, -72, -162, -174, -226, -299, -97, -145, -151, -171, -245, -242, -109, -149, -232, -175, -195, -257,
    /* IDX: 29*/ -220, -235, -659, -895, -734, -976, -861, -738, -792, -947, -610, -513, -157, -162, -229, -116, -123, -180, -190, -298, -97, -143, -149, -176, -246, -235, -108, -146, -227, -173, -199, -256,
    /* IDX: 30*/ -204, -213, -713, -865, -603, -801, -697, -640, -686, -826, -565, -486, -149, -151, -245, -130, -159, -181, -269, -299, -98, -146, -150, -171, -246, -240, -111, -152, -232, -178, -191, -256,
    /* IDX: 31*/ -196, -202, -494, -719, -534, -714, -592, -562, -704, -830, -535, -440, -153, -157, -258, -119, -151, -185, -242, -298, -96, -142, -151, -168, -245, -236, -108, -151, -227, -176, -196, -259
};
    return lBaselineOutputData;
}

OpNode GetWaveformBaselineNode(Scope &aScope)
{
    auto lNodeData = GetWaveformBaselineData();
std::vector<std::vector<uint32_t>> lTensorShapeTensorShapeData = { { 32, 32 } };
sTensorShape lTensorShape(lTensorShapeTensorShapeData, sizeof(uint32_t));
    sDataInitializerComponent lInputDataInitializer( lNodeData );
    auto lNode = MultiTensorValue( aScope, lInputDataInitializer, lTensorShape );
    return lNode;
}

std::vector<float> GetWaveformNoiseData()
{
std::vector<float> lBaselineOutputData = {
    /* IDX: 0*/ 38, 42, 32, 30, 30, 26, 31, 27, 30, 28, 31, 31, 35, 58, 16, 246, 23, 354, 22, 602, 21, 26, 23, 22, 27, 21, 26, 24, 26, 28, 38, 40,
    /* IDX: 1*/ 20, 23, 17, 16, 13, 18, 16, 15, 12, 13, 18, 22, 25, 8, 28, 16, 23, 18, 58, 16, 13, 16, 17, 11, 15, 17, 19, 20, 20, 23, 22, 27,
    /* IDX: 2*/ 17, 13, 12, 11, 13, 8, 12, 11, 14, 13, 15, 11, 15, 16, 18, 58, 10, 57, 20, 106, 12, 8, 12, 11, 15, 12, 8, 13, 12, 18, 18, 17,
    /* IDX: 3*/ 24, 23, 14, 21, 17, 19, 16, 20, 16, 19, 19, 22, 24, 261, 24, 295, 19, 58, 34, 79, 15, 13, 12, 8, 14, 15, 13, 13, 19, 21, 28, 31,
    /* IDX: 4*/ 18, 25, 11, 13, 10, 17, 11, 12, 8, 16, 13, 14, 11, 17, 62, 18, 70, 13, 235, 24, 13, 9, 10, 8, 8, 14, 13, 15, 16, 20, 20, 20,
    /* IDX: 5*/ 30, 25, 15, 15, 14, 11, 18, 17, 21, 15, 17, 14, 21, 35, 22, 38, 13, 27, 15, 69, 15, 15, 11, 13, 12, 18, 17, 16, 20, 26, 14, 19,
    /* IDX: 6*/ 17, 11, 16, 18, 13, 18, 16, 19, 15, 17, 22, 27, 26, 38, 31, 35, 29, 12, 50, 28, 15, 18, 14, 16, 14, 16, 14, 17, 19, 18, 20, 17,
    /* IDX: 7*/ 12, 14, 12, 11, 14, 13, 13, 8, 9, 7, 15, 18, 24, 21, 199, 16, 319, 16, 478, 45, 12, 13, 14, 13, 15, 10, 15, 15, 13, 14, 26, 28,
    /* IDX: 8*/ 18, 21, 18, 16, 14, 18, 14, 16, 17, 15, 14, 20, 22, 31, 18, 12, 16, 34, 33, 276, 14, 12, 12, 11, 11, 16, 18, 18, 21, 17, 19, 16,
    /* IDX: 9*/ 17, 22, 14, 19, 18, 20, 20, 17, 21, 12, 21, 22, 26, 23, 52, 10, 52, 20, 72, 25, 13, 10, 11, 13, 18, 13, 14, 15, 15, 18, 28, 24,
    /* IDX: 10*/ 20, 27, 16, 17, 21, 19, 18, 14, 20, 17, 23, 21, 24, 17, 243, 29, 38, 25, 37, 79, 14, 12, 11, 11, 9, 17, 15, 13, 19, 19, 14, 20,
    /* IDX: 11*/ 16, 15, 16, 13, 19, 24, 19, 17, 22, 17, 22, 23, 20, 14, 14, 54, 17, 163, 33, 795, 9, 10, 11, 11, 13, 12, 18, 8, 16, 17, 24, 19,
    /* IDX: 12*/ 19, 21, 12, 14, 16, 20, 24, 19, 18, 13, 19, 17, 19, 10, 36, 16, 19, 16, 61, 35, 14, 13, 10, 10, 9, 17, 13, 18, 21, 22, 17, 21,
    /* IDX: 13*/ 19, 22, 22, 21, 28, 26, 23, 18, 21, 20, 22, 24, 17, 18, 18, 25, 22, 35, 16, 191, 10, 14, 13, 16, 11, 14, 14, 13, 15, 20, 17, 23,
    /* IDX: 14*/ 25, 29, 24, 25, 26, 27, 29, 24, 25, 25, 23, 29, 26, 148, 20, 296, 20, 334, 62, 166, 15, 14, 13, 18, 16, 16, 13, 22, 21, 25, 26, 27,
    /* IDX: 15*/ 16, 19, 22, 30, 35, 31, 31, 23, 28, 26, 32, 28, 32, 16, 34, 20, 111, 13, 362, 45, 16, 11, 14, 17, 15, 13, 16, 18, 18, 19, 24, 21,
    /* IDX: 16*/ 14, 17, 25, 28, 24, 32, 32, 21, 29, 29, 26, 26, 24, 38, 13, 58, 10, 50, 20, 40, 10, 11, 15, 14, 15, 16, 13, 17, 18, 19, 42, 35,
    /* IDX: 17*/ 28, 33, 28, 30, 31, 32, 27, 26, 33, 33, 31, 27, 29, 287, 38, 63, 44, 25, 108, 16, 15, 14, 12, 10, 12, 19, 15, 18, 23, 22, 17, 22,
    /* IDX: 18*/ 17, 24, 22, 25, 30, 26, 28, 18, 20, 24, 19, 18, 26, 10, 114, 13, 158, 19, 812, 10, 9, 12, 10, 14, 8, 10, 18, 17, 15, 20, 15, 13,
    /* IDX: 19*/ 23, 30, 24, 26, 34, 30, 29, 27, 33, 29, 27, 29, 33, 37, 19, 33, 27, 32, 32, 14, 14, 11, 16, 12, 13, 13, 10, 13, 17, 18, 24, 22,
    /* IDX: 20*/ 29, 33, 22, 27, 18, 22, 22, 20, 18, 20, 31, 21, 20, 24, 42, 18, 24, 29, 154, 16, 20, 12, 15, 15, 15, 16, 14, 13, 20, 24, 34, 31,
    /* IDX: 21*/ 19, 23, 13, 12, 14, 20, 12, 14, 13, 8, 22, 16, 15, 16, 323, 10, 272, 26, 135, 15, 15, 12, 10, 8, 13, 10, 13, 14, 17, 16, 25, 22,
    /* IDX: 22*/ 21, 15, 17, 12, 13, 14, 13, 13, 15, 14, 12, 21, 21, 18, 14, 34, 20, 148, 21, 14, 14, 8, 7, 7, 8, 11, 16, 15, 15, 16, 18, 10,
    /* IDX: 23*/ 21, 23, 14, 13, 14, 15, 20, 12, 21, 22, 15, 18, 42, 18, 58, 14, 48, 22, 71, 18, 10, 14, 15, 9, 10, 14, 13, 16, 16, 22, 16, 13,
    /* IDX: 24*/ 27, 30, 17, 20, 18, 19, 19, 20, 22, 19, 23, 28, 346, 23, 36, 27, 18, 37, 34, 13, 16, 14, 16, 13, 16, 16, 17, 19, 20, 21, 26, 29,
    /* IDX: 25*/ 27, 25, 19, 20, 20, 19, 20, 18, 20, 20, 24, 25, 23, 101, 16, 203, 21, 428, 75, 17, 12, 16, 10, 13, 14, 11, 22, 18, 17, 23, 42, 33,
    /* IDX: 26*/ 26, 27, 21, 17, 19, 22, 21, 22, 23, 26, 22, 24, 40, 13, 24, 13, 26, 15, 246, 11, 11, 9, 12, 15, 11, 12, 13, 11, 17, 15, 16, 19,
    /* IDX: 27*/ 20, 19, 17, 12, 19, 13, 10, 8, 13, 13, 16, 14, 21, 22, 12, 28, 9, 76, 27, 20, 14, 17, 16, 14, 14, 22, 21, 19, 21, 28, 21, 22,
    /* IDX: 28*/ 21, 18, 20, 20, 21, 19, 16, 19, 23, 20, 22, 23, 19, 340, 17, 288, 21, 99, 90, 18, 18, 20, 23, 16, 18, 21, 18, 16, 20, 24, 16, 30,
    /* IDX: 29*/ 18, 19, 13, 18, 18, 12, 17, 22, 16, 20, 16, 20, 18, 7, 70, 20, 62, 17, 547, 18, 14, 8, 15, 17, 12, 17, 12, 15, 21, 17, 20, 26,
    /* IDX: 30*/ 20, 18, 14, 18, 17, 23, 19, 12, 18, 14, 25, 19, 17, 48, 19, 43, 10, 38, 34, 14, 20, 14, 16, 17, 17, 18, 16, 16, 19, 18, 22, 26,
    /* IDX: 31*/ 33, 29, 25, 28, 20, 21, 18, 19, 22, 21, 22, 24, 15, 48, 34, 23, 24, 26, 155, 38, 32, 32, 27, 32, 34, 33, 25, 27, 38, 37, 48, 57
};
    return lBaselineOutputData;
}

OpNode GetWaveformNoiseNode(Scope &aScope)
{
    auto lNodeData = GetWaveformNoiseData();
std::vector<std::vector<uint32_t>> lTensorShapeTensorShapeData = { { 32, 32 } };
sTensorShape lTensorShape(lTensorShapeTensorShapeData, sizeof(uint32_t));
    sDataInitializerComponent lInputDataInitializer( lNodeData );
    auto lNode = MultiTensorValue( aScope, lInputDataInitializer, lTensorShape );
    return lNode;
}

